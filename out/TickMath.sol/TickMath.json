{"abi":[],"bytecode":{"object":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122001164e8dc975e6613a9189d3804fb52bcf64d8669e8f2ba0be534f91cbacd42e64736f6c63430008190033","sourceMap":"306:8339:2:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;306:8339:2;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122001164e8dc975e6613a9189d3804fb52bcf64d8669e8f2ba0be534f91cbacd42e64736f6c63430008190033","sourceMap":"306:8339:2:-:0;;;;;;;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"MAX_SQRT_RATIO\":{\"details\":\"The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\"},\"MAX_TICK\":{\"details\":\"The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\"},\"MIN_SQRT_RATIO\":{\"details\":\"The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\"},\"MIN_TICK\":{\"details\":\"The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\"}},\"title\":\"Math library for computing sqrt prices from ticks and vice versa\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/lib/TickMath.sol\":\"TickMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"src/lib/TickMath.sol\":{\"keccak256\":\"0x1c14a2ea1797c00f8470b91f37a42316c5735b9bb9979582160e3b4c484a1ef3\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://85d41e5a102623d9d04b0d5fea6bd73fab2587b8df190918c3e502403dda6898\",\"dweb:/ipfs/QmUi1x92TyH6CEPfeq4qMpk9d12M7Xdc9KME9P4ztCb1CR\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.25+commit.b61c2a91"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["forge-std/=lib/forge-std/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/lib/TickMath.sol":"TickMath"},"evmVersion":"paris","libraries":{}},"sources":{"src/lib/TickMath.sol":{"keccak256":"0x1c14a2ea1797c00f8470b91f37a42316c5735b9bb9979582160e3b4c484a1ef3","urls":["bzz-raw://85d41e5a102623d9d04b0d5fea6bd73fab2587b8df190918c3e502403dda6898","dweb:/ipfs/QmUi1x92TyH6CEPfeq4qMpk9d12M7Xdc9KME9P4ztCb1CR"],"license":"GPL-2.0-or-later"}},"version":1},"id":2}